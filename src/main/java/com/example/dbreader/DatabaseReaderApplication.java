package com.example.dbreader;

import java.net.InetAddress;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

// Gerekli tÃ¼m Spring Boot, JPA, Zookeeper ve yardÄ±mcÄ± kÃ¼tÃ¼phanelerin import'larÄ±
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.leader.LeaderSelector;
import org.apache.curator.framework.recipes.leader.LeaderSelectorListener;
import org.apache.curator.framework.state.ConnectionState;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

// Bu sÄ±nÄ±f uygulamanÄ±n ana giriÅŸ noktasÄ±dÄ±r.
// @SpringBootApplication: Spring Boot uygulamasÄ±nÄ±n ana yapÄ±landÄ±rmasÄ±nÄ± saÄŸlar.
// @EnableScheduling: ZamanlanmÄ±ÅŸ gÃ¶revlerin (scheduled tasks) Ã§alÄ±ÅŸmasÄ±nÄ± etkinleÅŸtirir.
// CommandLineRunner: Uygulama baÅŸladÄ±ktan hemen sonra Ã§alÄ±ÅŸacak kodlarÄ± tanÄ±mlar.
@SpringBootApplication
@EnableScheduling
public class DatabaseReaderApplication implements CommandLineRunner {

    // ZooKeeperLeaderElection sÄ±nÄ±fÄ±nÄ±n bir Ã¶rneÄŸini enjekte eder (Autowired).
    @Autowired
    private ZooKeeperLeaderElection leaderElection;

    // UygulamayÄ± baÅŸlatan ana metot.
    public static void main(String[] args) {
        SpringApplication.run(DatabaseReaderApplication.class, args);
    }

    // Uygulama baÅŸlatÄ±ldÄ±ÄŸÄ±nda Ã§alÄ±ÅŸacak metot.
    @Override
    public void run(String... args) throws Exception {
        // Liderlik seÃ§im sÃ¼recini baÅŸlatan metodu Ã§aÄŸÄ±rÄ±r.
        leaderElection.start();

        // Uygulama Ã§alÄ±ÅŸmaya devam ederken ana thread'i bloke etmek iÃ§in bir kilit objesi kullanÄ±yoruz.
        // Liderlik seÃ§imi ve periyodik iÅŸlemlerin Ã§alÄ±ÅŸmasÄ± iÃ§in uygulama ayakta kalmalÄ±dÄ±r.
        Object lock = new Object();

        // Uygulama kapatÄ±ldÄ±ÄŸÄ±nda (Ã¶rneÄŸin Ctrl+C ile) temiz bir ÅŸekilde kapanma iÅŸlemi iÃ§in bir "shutdown hook" eklenir.
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            try {
                // Liderlik seÃ§im servisini durdurur.
                leaderElection.stop();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }));

        // Ana thread'i, kapatma kancasÄ± (shutdown hook) tetiklenene kadar bloke et.
        synchronized (lock) {
        lock.wait();
    }
    }
}

// VeritabanÄ±ndaki 'data_records' tablosuna karÅŸÄ±lÄ±k gelen JPA varlÄ±ÄŸÄ± (entity).
// Bu sÄ±nÄ±f, tablodaki her bir satÄ±rÄ± bir Java nesnesi olarak temsil eder.
@Entity
@Table(name = "data_records")
class DataRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id; // Birincil anahtar (Primary Key).

    @Column(name = "message")
    private String message; // Kaydedilen veri mesajÄ±.

    @Column(name = "created_at")
    private LocalDateTime createdAt; // KaydÄ±n oluÅŸturulma zamanÄ±.

    @Column(name = "processed_at")
    private LocalDateTime processedAt; // KaydÄ±n iÅŸlenme zamanÄ±. EÄŸer null ise, kayÄ±t iÅŸlenmemiÅŸtir.

    @Column(name = "processed_by")
    private String processedBy; // KaydÄ± iÅŸleyen uygulamanÄ±n ID'si.

    // Lombok kullanÄ±lmadÄ±ÄŸÄ± iÃ§in getter ve setter metotlarÄ± manuel olarak yazÄ±lmÄ±ÅŸtÄ±r.
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getMessage() { return message; }
    public void setMessage(String message) { this.message = message; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    public LocalDateTime getProcessedAt() { return processedAt; }
    public void setProcessedAt(LocalDateTime processedAt) { this.processedAt = processedAt; }

    public String getProcessedBy() { return processedBy; }
    public void setProcessedBy(String processedBy) { this.processedBy = processedBy; }
}

// Bu bir JPA Repository arayÃ¼zÃ¼dÃ¼r.
// @Repository: Spring'e bu sÄ±nÄ±fÄ±n veri eriÅŸim katmanÄ± (DAO) olduÄŸunu belirtir.
// JpaRepository: VeritabanÄ± iÅŸlemleri iÃ§in hazÄ±r metotlar (Ã¶rneÄŸin findById, save, findAll) sunar.
interface DataRecordRepository extends JpaRepository<DataRecord, Long> {
    // Ã–zel bir sorgu metodu: HenÃ¼z iÅŸlenmemiÅŸ (processedAt alanÄ± null olan) kayÄ±tlarÄ± bulur.
    List<DataRecord> findByProcessedAtIsNull();
}

// Bu sÄ±nÄ±f, veritabanÄ±ndan veri okuma ve iÅŸleme mantÄ±ÄŸÄ±nÄ± iÃ§erir.
// @Service: Spring'e bu sÄ±nÄ±fÄ±n bir iÅŸ mantÄ±ÄŸÄ± servisi olduÄŸunu belirtir.
class DataProcessor {

    // DataRecordRepository'yi enjekte eder. VeritabanÄ± iÅŸlemleri iÃ§in kullanÄ±lÄ±r.
    @Autowired
    private DataRecordRepository repository;

    // ZooKeeperLeaderElection servisini enjekte eder. Liderlik durumunu kontrol etmek iÃ§in kullanÄ±lÄ±r.
    @Autowired
    private ZooKeeperLeaderElection leaderElection;

    private String instanceId; // UygulamanÄ±n Ã§alÄ±ÅŸtÄ±ÄŸÄ± makinenin host adÄ±nÄ± tutar.

    // YapÄ±cÄ± metot (constructor). Uygulama Ã¶rneÄŸi iÃ§in benzersiz bir kimlik (ID) oluÅŸturur.
    public DataProcessor() {
        try {
            // Makinenin host adÄ±nÄ± alÄ±r, bÃ¶ylece loglarda hangi uygulamanÄ±n Ã§alÄ±ÅŸtÄ±ÄŸÄ± anlaÅŸÄ±lÄ±r.
            this.instanceId = InetAddress.getLocalHost().getHostName();
        } catch (Exception e) {
            // EÄŸer host adÄ± alÄ±namazsa, yedek bir ID oluÅŸturur.
            this.instanceId = "unknown-" + System.currentTimeMillis();
        }
    }

    // Bu metot, belirlenen aralÄ±klarla otomatik olarak Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r.
    // @Scheduled: ZamanlanmÄ±ÅŸ gÃ¶rev olduÄŸunu belirtir.
    // fixedDelayString: Ä°ki iÅŸlem arasÄ±ndaki gecikmeyi milisaniye cinsinden ayarlar.
    // app.processing.interval: Uygulama ayarlarÄ±ndan (Ã¶rneÄŸin application.properties) gelen bir deÄŸerdir.
    // :60000: EÄŸer deÄŸer bulunamazsa varsayÄ±lan olarak 60000 ms (1 dakika) kullanÄ±r.
    @Scheduled(fixedDelayString = "${app.processing.interval:60000}")
    public void processRecords() {
        // Liderlik durumunu kontrol eder. Sadece lider olan uygulama bu bloÄŸa girer.
        if (!leaderElection.isLeader()) {
            return; // Lider deÄŸilse metottan Ã§Ä±kar ve iÅŸlem yapmaz.
        }

        // HenÃ¼z iÅŸlenmemiÅŸ kayÄ±tlarÄ± veritabanÄ±ndan Ã§eker.
        List<DataRecord> unprocessedRecords = repository.findByProcessedAtIsNull();

        if (!unprocessedRecords.isEmpty()) {
            // Ä°ÅŸlenecek kayÄ±t varsa loglara bilgi yazar.
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
            System.out.println("ğŸ”¥ [MASTER-" + instanceId + "] " + timestamp + " - Processing " + unprocessedRecords.size() + " records:");

            // Her bir kaydÄ± dÃ¶ngÃ¼de iÅŸler.
            for (DataRecord record : unprocessedRecords) {
                // KaydÄ±n iÅŸlenme zamanÄ±nÄ± ve iÅŸleyen uygulamayÄ± gÃ¼nceller.
                record.setProcessedAt(LocalDateTime.now());
                record.setProcessedBy(instanceId);
                // GÃ¼ncellenmiÅŸ kaydÄ± veritabanÄ±na kaydeder.
                repository.save(record);

                // Ä°ÅŸlenen kaydÄ±n logunu yazar.
                System.out.println("   âœ… Processed record ID: " + record.getId() + " - Message: " + record.getMessage());
            }
        } else {
            // Ä°ÅŸlenmemiÅŸ kayÄ±t yoksa loglara bilgi yazar.
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
            System.out.println("ğŸ“Š [MASTER-" + instanceId + "] " + timestamp + " - No unprocessed records found");
        }
    }
}

// Bu sÄ±nÄ±f, Zookeeper'Ä±n **Apache Curator** kÃ¼tÃ¼phanesi ile liderlik seÃ§imi mantÄ±ÄŸÄ±nÄ± uygular.
// @Component: Spring'e bu sÄ±nÄ±fÄ±n bir bileÅŸen olduÄŸunu belirtir, bÃ¶ylece enjekte edilebilir.
@Component
class ZooKeeperLeaderElection {

    // Zookeeper baÄŸlantÄ± dizesini uygulama ayarlarÄ±ndan alÄ±r.
    // VarsayÄ±lan olarak "localhost:2181" kullanÄ±r.
    @Value("${zookeeper.connection-string:localhost:2181}")
    private String zookeeperConnectionString;

    private CuratorFramework client; // Zookeeper istemcisini yÃ¶neten ana nesne.
    private LeaderSelector leaderSelector; // Liderlik seÃ§im mantÄ±ÄŸÄ±nÄ± yÃ¶neten nesne.
    // Liderlik durumunu atomik olarak tutan bayrak. Ã‡oklu iÅŸ parÃ§acÄ±ÄŸÄ± gÃ¼venliÄŸi iÃ§in kullanÄ±lÄ±r.
    private AtomicBoolean isLeader = new AtomicBoolean(false);
    private String instanceId; // Uygulama Ã¶rneÄŸinin benzersiz kimliÄŸi.

    // YapÄ±cÄ± metot. Uygulama Ã¶rneÄŸi iÃ§in benzersiz bir kimlik (ID) oluÅŸturur.
    public ZooKeeperLeaderElection() {
        try {
            this.instanceId = InetAddress.getLocalHost().getHostName();
        } catch (Exception e) {
            this.instanceId = "unknown-" + System.currentTimeMillis();
        }
    }

    // Liderlik seÃ§im sÃ¼recini baÅŸlatan metot.
    public void start() throws Exception {
        // Zookeeper istemcisini oluÅŸturur ve baÄŸlanÄ±r.
        // ExponentialBackoffRetry: BaÄŸlantÄ± kesilmesi durumunda Ã¼stel geri Ã§ekilmeyle yeniden deneme stratejisi.
        client = CuratorFrameworkFactory.newClient(zookeeperConnectionString, new ExponentialBackoffRetry(1000, 3));
        client.start();
        client.blockUntilConnected(); // BaÄŸlantÄ± kurulana kadar bekler.

        // LeaderSelector nesnesini oluÅŸturur.
        // /dbreader/leader: Zookeeper'da liderlik seÃ§iminin yapÄ±lacaÄŸÄ± yol.
        // LeaderSelectorListener: Liderlik durumu deÄŸiÅŸtiÄŸinde Ã§aÄŸrÄ±lacak geri Ã§aÄŸÄ±rma (callback) metotlarÄ±nÄ± iÃ§erir.
        leaderSelector = new LeaderSelector(client, "/dbreader/leader", new LeaderSelectorListener() {
            // Bu metot, bu Ã¶rnek lider seÃ§ildiÄŸinde Ã§aÄŸrÄ±lÄ±r.
            @Override
            public void takeLeadership(CuratorFramework client) throws Exception {
                isLeader.set(true); // isLeader bayraÄŸÄ±nÄ± true yapar.
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                System.out.println("ğŸ‘‘ [" + timestamp + "] Instance " + instanceId + " became MASTER!");

                try {
                    // Lider olduÄŸu sÃ¼rece sonsuz bir dÃ¶ngÃ¼de bekler.
                    while (isLeader.get()) {
                        Thread.sleep(5000);
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } finally {
                    // Liderlik kaybedildiÄŸinde bu blok Ã§alÄ±ÅŸÄ±r.
                    isLeader.set(false); // isLeader bayraÄŸÄ±nÄ± false yapar.
                    String endTimestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    System.out.println("ğŸ’” [" + endTimestamp + "] Instance " + instanceId + " lost leadership");
                }
            }

            // Bu metot, Zookeeper baÄŸlantÄ± durumu deÄŸiÅŸtiÄŸinde Ã§aÄŸrÄ±lÄ±r.
            @Override
            public void stateChanged(CuratorFramework client, ConnectionState newState) {
                // EÄŸer baÄŸlantÄ± koptuysa veya askÄ±ya alÄ±ndÄ±ysa, liderlik durumunu false yapar.
                if (newState == ConnectionState.LOST || newState == ConnectionState.SUSPENDED) {
                    isLeader.set(false);
                }
            }
        });

        // EÄŸer liderlik kaybedilirse, tekrar liderlik sÄ±rasÄ±na girmesini saÄŸlar.
        leaderSelector.autoRequeue();
        // Liderlik seÃ§im sÃ¼recini baÅŸlatÄ±r.
        leaderSelector.start();

        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        System.out.println("ğŸš€ [" + timestamp + "] Instance " + instanceId + " started and joined leader election");
    }

    // Liderlik seÃ§im sÃ¼recini ve Zookeeper baÄŸlantÄ±sÄ±nÄ± durduran metot.
    public void stop() throws Exception {
        isLeader.set(false);
        if (leaderSelector != null) {
            leaderSelector.close();
        }
        if (client != null) {
            client.close();
        }
    }

    // Bu uygulamanÄ±n lider olup olmadÄ±ÄŸÄ±nÄ± kontrol eden metot.
    public boolean isLeader() {
        return isLeader.get();
    }
}
